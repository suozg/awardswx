# graph.py

import wx
import wx.lib.plot as plot
from database_logic import AwardDataLoader  # ‚Üê –ò–º–ø–æ—Ä—Ç –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞

class AwardGraphPanel(wx.Panel):
    def __init__(self, parent, cursor, start_year, element_controls): # <-- –ò–∑–º–µ–Ω–µ–Ω–æ
        super().__init__(parent, wx.ID_ANY) # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ wx.ID_ANY
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.cursor = cursor # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫—É—Ä—Å–æ—Ä
        self.START_YEAR = start_year 
        self.element_controls = element_controls

        self.data_loader = AwardDataLoader(self.START_YEAR) # <-- –°–æ–∑–¥–∞–µ–º Data Loader

        try:
            # –í—ã–∑—ã–≤–∞–µ–º load_data —É data_loader, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ö–£–†–°–û–†
            self.data_loader.load_data(self.cursor) # <-- –í—ã–∑–æ–≤ load_data —Å –∫—É—Ä—Å–æ—Ä–æ–º. –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

        except RuntimeError as e:
            wx.MessageBox(str(e), "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥—Ä–∞—Ñ—ñ–∫–∞", wx.OK | wx.ICON_ERROR)

        self.init_ui()

    def init_ui(self):
        sizer = wx.BoxSizer(wx.VERTICAL)

        # –°–æ–∑–¥–∞–Ω–∏–µ canvas –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        self.plot_canvas = plot.PlotCanvas(self, wx.ID_ANY) # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ wx.ID_ANY
        sizer.Add(self.plot_canvas, 1, wx.EXPAND | wx.ALL, 10)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ß–ï–†–ï–ó self.data_loader
        x_data, y_state, y_all, y_present = self.data_loader.get_graph_data() # <-- –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ data_loader

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        if not x_data or not y_all:
            # –î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫
            empty_plot_label = wx.StaticText(self.plot_canvas, wx.ID_ANY, "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞.")
            # –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —Å–∫—Ä—ã—Ç—å plot_canvas –∏ –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç label
            sizer.Replace(self.plot_canvas, empty_plot_label) # –ü—Ä–∏–º–µ—Ä –∑–∞–º–µ–Ω—ã
            self.plot_canvas.Hide()
            sizer.Add(empty_plot_label, 1, wx.ALIGN_CENTER | wx.ALL, 10)
            self.plot_canvas = None 

        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            line1 = plot.PolyLine(list(zip(x_data, y_state)), colour='blue', width=1, legend='–í—ñ–¥ –¥–µ—Ä–∂–∞–≤–∏')
            line2 = plot.PolyLine(list(zip(x_data, y_all)), colour='red', width=1, legend='–£—Å—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏')
            line3 = plot.PolyLine(list(zip(x_data, y_present)), colour='green', width=1, legend='–ü–æ–¥–∞–Ω–Ω—è')

            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            self.plot_canvas.Draw(plot.PlotGraphics([line1, line2, line3], "–î–∏–Ω–∞–º—ñ–∫–∞ –Ω–∞–≥–æ—Ä–æ–¥–∂–µ–Ω—å", "–†—ñ–∫", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å")) # –î–æ–±–∞–≤–ª–µ–Ω—ã –º–µ—Ç–∫–∏ –æ—Å–µ–π
            self.plot_canvas.xSpec = ('minmax',) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Å–µ–π
            self.plot_canvas.ySpec = ('minmax',)


        # –õ–µ–≥–µ–Ω–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ self.data_loader)
        legend_panel = wx.Panel(self, wx.ID_ANY) # –°–æ–∑–¥–∞–µ–º –Ω–∞ AwardGraphPanel, –Ω–µ –Ω–∞ detail_panel
        legend_sizer = wx.BoxSizer(wx.HORIZONTAL)
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ self.data_loader
        total_all = sum(y_all) if y_all else 0 # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ get_graph_data
        total_state = sum(y_state) if y_state else 0 # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ get_graph_data
        total_present = sum(y_present) if y_present else 0 # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ get_graph_data

        legend_sizer.Add(wx.StaticText(legend_panel, wx.ID_ANY, label=f"üü• –£—Å—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏ ({total_all})"), 0, wx.RIGHT, 10)
        legend_sizer.Add(wx.StaticText(legend_panel, wx.ID_ANY, label=f"üü¶ –í—ñ–¥ –¥–µ—Ä–∂–∞–≤–∏ ({total_state})"), 0, wx.RIGHT, 10)
        legend_sizer.Add(wx.StaticText(legend_panel, wx.ID_ANY, label=f"üü© –ü–æ–¥–∞–Ω–Ω—è ({total_present})"), 0)
        legend_panel.SetSizer(legend_sizer)
        sizer.Add(legend_panel, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.BOTTOM, 10) # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏

        # –°–ª–∞–π–¥–µ—Ä (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ self.data_loader)
        self.slider_panel = wx.Panel(self, wx.ID_ANY) # –°–æ–∑–¥–∞–µ–º –Ω–∞ AwardGraphPanel
        slider_sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.slider_label = wx.StaticText(self.slider_panel, wx.ID_ANY, label="")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º x_data –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–ª–∞–π–¥–µ—Ä–∞
        slider_max_value = len(x_data) - 1 if x_data else 0
        self.slider = wx.Slider(self.slider_panel, wx.ID_ANY, value=slider_max_value, minValue=0, maxValue=slider_max_value)
        slider_sizer.Add(self.slider_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 8)
        slider_sizer.Add(self.slider, 1, wx.EXPAND) # –°–ª–∞–π–¥–µ—Ä –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è
        self.slider_panel.SetSizer(slider_sizer)
        sizer.Add(self.slider_panel, 0, wx.EXPAND | wx.ALL, 10) # –ü–∞–Ω–µ–ª—å —Å–ª–∞–π–¥–µ—Ä–∞ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–ª–∞–π–¥–µ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        if x_data: # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            self.slider.Bind(wx.EVT_SLIDER, self.on_slider_scroll)
            self.slider.SetFocus() # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ —Å–ª–∞–π–¥–µ—Ä
            self.on_slider_scroll(None) # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –æ—Ç–∫–ª—é—á–∞–µ–º —Å–ª–∞–π–¥–µ—Ä
            self.slider.Disable()
            self.slider_label.SetLabel("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≥–æ–¥—ã –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞") # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        self.SetSizer(sizer)
        self.Layout() # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–ø–æ–Ω–æ–≤–∫—É
        self.SetMinSize((600, 400)) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (SetSizeHints —É—Å—Ç–∞—Ä–µ–ª)


    def on_slider_scroll(self, event):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ x_data, y_state, y_all –ß–ï–†–ï–ó self.data_loader
        x_data, y_state, y_all, y_present = self.data_loader.get_graph_data() # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ

        val = self.slider.GetValue()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –∏–Ω–¥–µ–∫—Å–∞
        if not x_data or val < 0 or val >= len(x_data):
             text = "** –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞ **"
             self.slider_label.SetLabel(text)
             self.slider_panel.Layout()
             return

        selected_year = x_data[val]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å —Å–Ω–æ–≤–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if selected_year in x_data:
             index = x_data.index(selected_year) # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–æ –≥–æ–¥—É
             y_val_state = y_state[index]
             y_val_all = y_all[index]
             # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
             percentage = round(y_val_state / y_val_all * 100) if y_val_all else 0
             text = f' ** –∑–∞ {selected_year} —Ä—ñ–∫: {y_val_all} ({y_val_state}, –∞–±–æ {percentage}%)'
        else:
             # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–µ–Ω, –µ—Å–ª–∏ selected_year –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ x_data
             text = f' ** –∑–∞ {selected_year} —Ä—ñ–∫: 0' # –ò–ª–∏ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        self.slider_label.SetLabel(text)
        self.slider_panel.Layout()


    def get_status_text(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞, –ø–æ–ª—É—á–∞—è –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ AwardDataLoader."""
        return self.data_loader.get_status_text() # <-- –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ data_loader


# --- –ö–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∞ AwardGraphPanel ---